name: Deploy to EC2

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4
    
    # 2. JDK 21 설정
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'
    
    # 3. Gradle 빌드 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    
    # 4. 빌드 (테스트 제외)
    - name: Build with Gradle
      run: ./gradlew clean build -x test
    
    # 5. JAR 파일명 확인 (plain.jar 제외)
    - name: Get JAR filename
      id: jar
      run: |
        JAR_FILE=$(ls build/libs/*.jar | grep -v plain | head -n 1)
        echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT
        echo "Found JAR: $(basename $JAR_FILE)"
    
    # 6. SSH 키 설정 (Base64 디코딩)
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ~/.ssh/deploy_key.pem
        chmod 600 ~/.ssh/deploy_key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    # 7. 기존 백업 생성 (롤백용)
    - name: Backup previous JAR on EC2
      run: |
        ssh -i ~/.ssh/deploy_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          if [ -f ~/app.jar ]; then
            cp ~/app.jar ~/app.jar.backup
            echo "✅ Previous JAR backed up"
          fi
        ENDSSH
    
    # 8. 새 JAR 파일 전송
    - name: Copy JAR to EC2
      run: |
        scp -i ~/.ssh/deploy_key.pem \
          ${{ steps.jar.outputs.jar_file }} \
          ubuntu@${{ secrets.EC2_HOST }}:~/app.jar
        echo "✅ JAR file uploaded: ${{ steps.jar.outputs.jar_name }}"
    
    # 9. 배포 실행
    - name: Deploy on EC2
      run: |
        ssh -i ~/.ssh/deploy_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          echo "🔄 Starting deployment..."
          
          # 기존 Java 프로세스 종료
          if pgrep -f 'java -jar' > /dev/null; then
            echo "Stopping existing Java process..."
            pkill -f 'java -jar' || true
            sleep 3
          fi
          
          # 프로세스가 완전히 종료되었는지 확인
          if pgrep -f 'java -jar' > /dev/null; then
            echo "Force killing Java process..."
            pkill -9 -f 'java -jar' || true
            sleep 2
          fi
          
          # 새 JAR 실행 (명령줄 인자 방식 - 특수문자 안전!)
          nohup java -jar ~/app.jar \
            --spring.profiles.active=prod \
            --spring.datasource.url=jdbc:mysql://${{ secrets.DB_HOST }}:3306/${{ secrets.DB_NAME }} \
            --spring.datasource.username=${{ secrets.DB_USERNAME }} \
            --spring.datasource.password='${{ secrets.DB_PASSWORD }}' \
            --spring.jpa.hibernate.ddl-auto=update \
            --cloud.aws.s3.bucket=${{ secrets.S3_BUCKET_NAME }} \
            --cloud.aws.region.static=${{ secrets.AWS_REGION }} \
            --file.storage.type=s3 \
            --custom.jwt.secretKey=${{ secrets.JWT_SECRET_KEY }} \
            --gemini.api.key=${{ secrets.GEMINI_API_KEY }} \
            --gemini.api.url=${{ secrets.GEMINI_API_URL }} \
            --spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }} \
            --custom.site.cookieDomain=${{ secrets.COOKIE_DOMAIN }} \
            --custom.site.frontUrl=${{ secrets.FRONT_URL }} \
            --custom.site.backUrl=${{ secrets.BACK_URL }} \
            > ~/app.log 2>&1 &
          
          echo "⏳ Waiting for application to start..."
          sleep 5
          
          # 프로세스 시작 확인
          if pgrep -f 'java -jar' > /dev/null; then
            PID=$(pgrep -f 'java -jar')
            echo "✅ Application started successfully!"
            echo "Process ID: $PID"
          else
            echo "❌ Application failed to start!"
            echo "Last 100 lines of log:"
            tail -100 ~/app.log
            exit 1
          fi
        ENDSSH
    
    # 10. Health Check
    - name: Health Check
      run: |
        echo "⏳ Waiting for application to be ready..."
        sleep 15
        
        for i in {1..10}; do
          echo "Health check attempt $i/10..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:8080/actuator/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed! Application is healthy."
            exit 0
          fi
          
          echo "⏳ Status: $response, retrying in 5 seconds..."
          sleep 5
        done
        
        echo "❌ Health check failed after 10 attempts"
        echo "Checking application logs..."
        ssh -i ~/.ssh/deploy_key.pem ubuntu@${{ secrets.EC2_HOST }} "tail -100 ~/app.log"
        exit 1
    
    # 11. 배포 완료 알림
    - name: Deployment Success
      if: success()
      run: |
        echo "🎉 =================================="
        echo "🎉 Deployment completed successfully!"
        echo "🎉 =================================="
        echo "Application URL: http://${{ secrets.EC2_HOST }}:8080"
        echo "Time: $(date)"
